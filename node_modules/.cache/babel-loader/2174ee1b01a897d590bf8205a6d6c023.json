{"ast":null,"code":"var _jsxFileName = \"/Users/shrutika/Desktop/pucho_localisation-master/src/containers/fileupload.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Upload extends Component {\n  /*  constructor(){\n      super();\n      this.state={\n        selectedFile:null\n      }\n      this.fileUploadHandler=this.fileUploadHandler.bind(this);\n      this.fileSelectHandler=this.fileSelectHandler.bind(this)\n    }\n    fileUploadHandler=()=>{\n        axios.post(\"\")\n    }\n    fileSelectHandler=(event)=>{\n      this.setState({\n        selectedFile:event.target.files[0]\n      })\n    }\n  render(){\n    return(\n      <div>\n      <h1>Upload the files to parse here</h1>\n      <input type=\"file\" onChange={this.fileSelectHandler}/>\n      <button onClick={this.fileUploadHandler}> Upload </button>\n      </div>\n    )\n  }\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: []\n    };\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.uploadFile = this.uploadFile.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: event => this.setState({\n        files: this.state.files.concat(Array.from(event.target.files))\n      }),\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(FileManager, {\n      files: this.state.files,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.uploadFiles));\n  }\n\n  uploadFiles(files) {\n    return files.map(this.uploadFile);\n  }\n\n  uploadFile(file) {\n    return React.createElement(FileUploader, {\n      key: file.key,\n      file: file,\n      url: \"https://api.cloudinary.com/v1_1/dpdenton/upload\",\n      formData: {\n        file,\n        upload_preset: 'public',\n        tags: 'vanilla'\n      },\n      readFile: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.fileProgress);\n  }\n\n  static fileProgress({\n    /*\n    References to the Event objects.\n    Initial state is null and each propert gets assigned on Event.\n     */\n    uploadReady,\n    uploadStart,\n    uploadProgress,\n    uploadComplete,\n    downloadStart,\n    downloadProgress,\n    downloadComplete,\n    error,\n    abort,\n    timeout,\n\n    /*\n    The sequential state of the request\n    enum {\n        uploadReady, uploadStart, uploadProgress, uploadComplete, downloadStart\n        downloadStart, downloadProgress, downloadComplete\n    }\n     */\n    requestState,\n\n    /*\n    Function references to start / abort request\n      */\n    startUpload,\n    abortRequest,\n\n    /*\n    Request Object reference (XMLHttpReqeust)\n     */\n    request,\n\n    /*\n    Response text Object (JSON)\n     */\n    response,\n\n    /*\n    Data of the file being uploaded (if readData props is true)\n     */\n    fileData\n  }) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, fileData && React.createElement(\"img\", {\n      src: fileData,\n      width: 200,\n      alt: \"Preview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), startUpload && React.createElement(\"button\", {\n      onClick: startUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Upload File\"), requestState && requestState);\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/shrutika/Desktop/pucho_localisation-master/src/containers/fileupload.js"],"names":["React","Component","axios","Upload","constructor","props","state","files","uploadFiles","bind","uploadFile","render","event","setState","concat","Array","from","target","map","file","key","upload_preset","tags","fileProgress","uploadReady","uploadStart","uploadProgress","uploadComplete","downloadStart","downloadProgress","downloadComplete","error","abort","timeout","requestState","startUpload","abortRequest","request","response","fileData"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,MAAN,SAAqBF,SAArB,CAA8B;AAC9B;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BIG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,MAAM,EAAC,SAFX;AAGI,MAAA,QAAQ,EAAEC,KAAK,IAAI,KAAKC,QAAL,CAAc;AAACN,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiBO,MAAjB,CAAwBC,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,CAAaV,KAAxB,CAAxB;AAAR,OAAd,CAHvB;AAII,MAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOI,oBAAC,WAAD;AACI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGK,KAAKC,WAHV,CAPJ,CADJ;AAeH;;AAEDA,EAAAA,WAAW,CAACD,KAAD,EAAQ;AACf,WAAOA,KAAK,CAACW,GAAN,CAAU,KAAKR,UAAf,CAAP;AACH;;AAEDA,EAAAA,UAAU,CAACS,IAAD,EAAO;AACb,WACI,oBAAC,YAAD;AACI,MAAA,GAAG,EAAEA,IAAI,CAACC,GADd;AAEI,MAAA,IAAI,EAAED,IAFV;AAGI,MAAA,GAAG,EAAC,iDAHR;AAII,MAAA,QAAQ,EAAE;AACNA,QAAAA,IADM;AAENE,QAAAA,aAAa,EAAE,QAFT;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAJd;AASI,MAAA,QAAQ,MATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWK,KAAKC,YAXV,CADJ;AAeH;;AAED,SAAOA,YAAP,CAAoB;AAEhB;;;;AAIAC,IAAAA,WANgB;AAOhBC,IAAAA,WAPgB;AAQhBC,IAAAA,cARgB;AAShBC,IAAAA,cATgB;AAUhBC,IAAAA,aAVgB;AAWhBC,IAAAA,gBAXgB;AAYhBC,IAAAA,gBAZgB;AAahBC,IAAAA,KAbgB;AAchBC,IAAAA,KAdgB;AAehBC,IAAAA,OAfgB;;AAiBhB;;;;;;;AAOAC,IAAAA,YAxBgB;;AA0BhB;;;AAGAC,IAAAA,WA7BgB;AA8BhBC,IAAAA,YA9BgB;;AAgChB;;;AAGAC,IAAAA,OAnCgB;;AAqChB;;;AAGAC,IAAAA,QAxCgB;;AA0ChB;;;AAGAC,IAAAA;AA7CgB,GAApB,EA+CI;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,QAAQ,IAAI;AAAK,MAAA,GAAG,EAAEA,QAAV;AAAoB,MAAA,KAAK,EAAE,GAA3B;AAAgC,MAAA,GAAG,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjB,EAEKJ,WAAW,IAAI;AAAQ,MAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFpB,EAGKD,YAAY,IAAIA,YAHrB,CADJ;AAOH;;AApIyB;;AAyI9B,eAAe/B,MAAf","sourcesContent":["import React,{Component} from 'react';\nimport axios from 'axios';\nclass Upload extends Component{\n/*  constructor(){\n    super();\n    this.state={\n      selectedFile:null\n    }\n    this.fileUploadHandler=this.fileUploadHandler.bind(this);\n    this.fileSelectHandler=this.fileSelectHandler.bind(this)\n  }\n  fileUploadHandler=()=>{\n      axios.post(\"\")\n  }\n  fileSelectHandler=(event)=>{\n    this.setState({\n      selectedFile:event.target.files[0]\n    })\n  }\nrender(){\n  return(\n    <div>\n    <h1>Upload the files to parse here</h1>\n    <input type=\"file\" onChange={this.fileSelectHandler}/>\n    <button onClick={this.fileUploadHandler}> Upload </button>\n    </div>\n  )\n}\n*/\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n        this.uploadFiles = this.uploadFiles.bind(this);\n        this.uploadFile = this.uploadFile.bind(this);\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={event => this.setState({files: this.state.files.concat(Array.from(event.target.files))})}\n                    multiple\n                />\n                <FileManager\n                    files={this.state.files}\n                >\n                    {this.uploadFiles}\n                </FileManager>\n            </div>\n        )\n    }\n\n    uploadFiles(files) {\n        return files.map(this.uploadFile);\n    }\n\n    uploadFile(file) {\n        return (\n            <FileUploader\n                key={file.key}\n                file={file}\n                url='https://api.cloudinary.com/v1_1/dpdenton/upload'\n                formData={{\n                    file,\n                    upload_preset: 'public',\n                    tags: 'vanilla',\n                }}\n                readFile\n            >\n                {this.fileProgress}\n            </FileUploader>\n        )\n    }\n\n    static fileProgress({\n\n        /*\n        References to the Event objects.\n        Initial state is null and each propert gets assigned on Event.\n         */\n        uploadReady,\n        uploadStart,\n        uploadProgress,\n        uploadComplete,\n        downloadStart,\n        downloadProgress,\n        downloadComplete,\n        error,\n        abort,\n        timeout,\n\n        /*\n        The sequential state of the request\n        enum {\n            uploadReady, uploadStart, uploadProgress, uploadComplete, downloadStart\n            downloadStart, downloadProgress, downloadComplete\n        }\n         */\n        requestState,\n\n        /*\n        Function references to start / abort request\n          */\n        startUpload,\n        abortRequest,\n\n        /*\n        Request Object reference (XMLHttpReqeust)\n         */\n        request,\n\n        /*\n        Response text Object (JSON)\n         */\n        response,\n\n        /*\n        Data of the file being uploaded (if readData props is true)\n         */\n        fileData,\n\n     }) {\n        return (\n            <div>\n                {fileData && <img src={fileData} width={200} alt=\"Preview\"/>}\n                {startUpload && <button onClick={startUpload}>Upload File</button>}\n                {requestState && requestState}\n            </div>\n        )\n    }\n\n}\n\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}